* Install vanilla Raspian Lite
** Download Raspian Lite
*** https://www.raspberrypi.org/documentation/installation/installing-images/linux.md
** Place SD card into an Ubuntu machine
*** wipe the card so it's completely free space
**** do this however you like; I use unity's disk application, but anything should work
**** while you do this, you can get the /dev/sdX value used in the following step if you want
*** Install Raspian Lite from .img file
**** dd bs=4M if=2018-11-13-raspbian-stretch.img of=/dev/sdX conv=fsync status=progress
***** use lsblk to get the value of X
***** the wrong X will wipe one of your hard drives, so be careful
** Set up USB connection data with Ubuntu
*** Do the following on the SD card
**** Edit the following files as specified bellow
***** add 'dtoverlay=dwc2' to /boot/config.txt
***** add 'modules-load=dwc2,g_ether' after 'rootwait' to /boot/cmdline.txt
*** Do the following on the Ubuntu machine
**** Install the USB protocol
***** sudo apt install avahi-daemon avahi-discover avahi-utils libnss-mdns mdns-scan
***** sudo systemctl enable avahi-daemon
***** sudo systemctl start avahi-daemon
**** We'll have to do more in the next step once the pi is alive and plugged in

* Set up basics for Raspian
** Place SD card into pi
** Before connecting power, connect the pi to the Ubuntu machine via USB
** Connect the power
*** From the pi's physical terminal do the following
**** log in via username 'pi' and password 'raspberry'
**** change the password for the pi user
***** passwd
**** sudo raspi-config
****** Go to 'Interface Options'
******* Enable ssh
******* Enable i2c
******* Disable serial login, enable serial
**** Reboot now
***** If no ssh later, run the following to recreate the RSA keys
****** sudo rm /etc/ssh/ssh_host_*
****** sudo dpkg-reconfigure openssh-server
***** You might have a bad install if this didn't work
****** you'll need to restart if so; this has happened to me only once
** Finish setting up the USB internet connection
*** On the Ubuntu machine
**** find the pi's networking interface
***** sudo avahi-browse -all
****** You'll see something like enp0s20f0u1 appear
****** compare this value with the output of 'ifconfig'
****** this is the networking interface you'll use
**** set up the interface
***** click on the WiFi symbol in the menu bar and press 'Edit Connections'
***** one of the wired connects will be the pi; open this one
****** Go to IPv4 settings and change the 'Method' to "Shared to other computers"
****** Optionally, change IPv6's 'Method' to 'Ignore'
*** On the pi
**** unplug and plug back in the USB cable
**** reboot the pi
**** unplug and plug back in the USB cable
** Perform rest of primary setup on Pi via SSH
*** SSH into pi via 'ssh raspberrypi.local
*** update the pi
**** sudo apt update && sudo apt upgrade -y && sudo apt-get dist-upgrade -y && sudo apt autoremove
*** add new software
**** sudo apt install emacs-nox logwatch ufw htop git pigpio ssmtp mailutils libncurses5-dev libncursesw5-dev i2c-tools tmux sysstat libaa-bin sl valgrind bc
*** fix fstap procedure
**** sudo cp /etc/fstab /etc/fstap.backup
***** replace all nonzero entries in the last column with 0
***** note this permenently disables boot time system integrity checking
***** use the backup file if suspected corruption occurs
**** edit /etc/fstab
***** replace all nonzero entries in the last column with 0
***** note this permenently disables boot time system integrity checking
***** use the backup file if suspected corruption occurs
*** create new user accounts
**** repeat the following for all desired user accounts
***** sudo adduser noah
***** sudo usermod -aG sudo noah
**** sudo reboot 0
*** final initialization steps
**** SSH using different different username
**** Clone repositories
***** git clone https://github.com/Noah-Franks/FEMTA.git
****** Installs the FEMTA repository, where the main satellite code is present
****** You need to have GitHub access to push to the repository. Ask Noah for an invitation. 
***** git clone https://github.com/Noah-Franks/Layer.git
****** Installs a layer noah wrote for interfacing with the operating system
****** Contains various dot files, which may no longer be needed
****** You need to have GitHub access to the repository. Ask noah for an invitation.
***** git clone https://github.com/Noah-Franks/PRA
****** Installs Noah's PRA fault tree analysis software
***** git clone https://github.com/Noah-Franks/cdd
****** Installs an auxiliary to cd named cdd that Noah wrote
**** Add the mail system
***** edit /etc/ssmtp/ssmtp.conf as follows
****** alter the following
******* root=FEMTAdirect@gmail.com
******* mailhub=smtp.gmail.com:587
****** append the following to the end
******* AuthUser=FEMTAdirect@gmail.com
******* AuthPass=thissatelliteisonitswaytospace
******* FromLineOverride=YES
******* UseSTARTTLS=YES
******* UseTLS=YES
**** Edit the crontab
***** Select emacs
***** append the following to the end
****** 0,20,40 * * * * /home/noah/FEMTA/spacebound/helper-scripts/email.sh
**** Change ssh permissions
***** Append the following to /etc/ssh/sshd_config
****** AllowUsers noah
***** This white lists everyone but the default user pi
***** This ensures bots on the internet won't know a username for the satellite

* apply real time patch
** switch to another computer and copy kernel
*** scp rt-kernel.tgz noah@<ip address>:/tmp
** ssh into pi
*** tar xzf rt-kernel.tgz
*** sudo cp -rd boot/* /boot/
*** sudo cp -rd lib/* /lib
*** sudo cp -d overlays/* /boot/overlays/
*** sudo cp -d bcm* /boot/
*** sudo emacs /boot/config.txt
**** add the line kernel=vmlinuz-4.14.91-rt49+
***** might have to change kernel version at the end
*** fix keyboard interrupt crashing
**** sudo emacs /boot/cmdline.txt
***** add the following to the end
****** dwc_otg.fiq_fsm_enable=0 dwc_otg.fiq_enable=0 dwc_otg.nak_holdoff=0 
***** when you reboot check the FIQ is disabled via 
****** dmesg | grep otg
*** sudo reboot 0
** if everything went right, do uname -r and see if the version matches
*** the login message will also have the text PREEMPT_RT in it
** if not, here's things to consider
*** debian uses a keyboard script that has issues with the real time clock during boot
**** unplug the keyboard you are using and boot up without it

* only do the following if you want to use the ds3231 as the system clock
** recognize that by doing this you can't use the ds3231 in your program
** recognize that 0x68 will be set to UU due to being appropriated by the kernel
** recognize that Noah hasn't yet gotten this to work on a PREEMPT_RT kernel yet
** add physical real time clock
*** connect DS3231N via i2c
*** alter the last line in /boot/config.txt as follows
**** change dtoverlay=pi3-disable-bt to dtoverlay=pi3-disable-bt,i2c-rtc,ds3231
*** sudo reboot 0
*** remove fake hardware clock
**** sudo apt remove fake-hwclock
**** sudo update-rc.d -f fake-hwclock remove
**** sudo systemctl disable fake-hwclock
*** comment out the following lines in /lib/udev/hwclock-set
**** if [ -e /run/systemd/system ] ; then
****     exit 0
**** fi
*** also comment out all lines containing --sysstz in the same file
