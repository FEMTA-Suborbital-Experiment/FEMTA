lines(smoothed, col=5)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoother), col=5)
?loess
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
oldfaith.frame(x=Duration, y=Interval))
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
lines(predict(smoother), col=5)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(sort(oldfaith$Duration), sort(oldfaith$Interval),
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[order(oldfaith$Duration)], predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=8, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=9, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=1, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=10, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=12, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
setwd("~/Documents/FEMTA/ignored/CDR")
install.packages('ggplot2')
Quanta <- read.delim("~/Documents/FEMTA/ignored/CDR/real-time-bounds-1.txt", header=FALSE, stringsAsFactors=FALSE)
View(Quanta)
library(ggplot2)
Quanta$request <- as.factor(Quanta$V3)
Quanta$request <- as.factor(Quanta$V3)
Quanta <- read.delim(
"~/Documents/FEMTA/ignored/CDR/real-time-bounds-1.txt",
header=FALSE,
stringsAsFactors=FALSE)
Quanta$request <- as.factor(Quanta$V3)
Quanta$error <- Quanta$V2 / 1E3
Meta <- data.frame()
Meta.quanta   <- unique(Quanta$V3 / 1E6)
Meta.averages <- with(Quanta, tapply(error, request, mean))
Meta.stddevs  <- with(Quanta, tapply(error, request, sd))
Meta.min      <- with(Quanta, tapply(error, request, min))
Meta.max      <- with(Quanta, tapply(error, request, max))
Meta.Q3       <- with(Quanta, tapply(error, request, quantile, prob=.95))
Meta.averages
Meta.names <- c(".001", ".01", "0.1")
plot(Meta.averages)
plot(Meta.stddevs)
plot(Meta.min)
plot(Meta.max)
stroke <- 0.5
ggplot(Meta, aes(x=Meta.quanta, y=Meta.averages)) +
geom_ribbon(aes(ymin=Meta.min, ymax=with(Quanta, Meta.max)),
alpha=0.0,       #transparency
#linetype=1,      #solid, dashed or other line types
#colour="grey70", #border line color
size=1,          #border line size
show.legend = TRUE
) +
geom_ribbon(aes(ymax=Meta.max,
ymin=with(Quanta, tapply(error, request, quantile, prob=.999))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="red") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.999)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.99))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="orange") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.99)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.9))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="yellow") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.9)),
ymin=Meta.min),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="green") +
geom_point(size=2.5, col="black") +
xlab("Quantum ms") +
ylab("Error μs") +
ggtitle("Quantum Fidelity", subtitle = waiver()) +
scale_fill_manual("",values="grey12")
g + theme(legend.title = element_text(colour ="black", size=16, face="bold"))
ggplot(Meta, aes(x=Meta.quanta, y=Meta.averages)) +
geom_ribbon(aes(ymin=Meta.min, ymax=with(Quanta, Meta.max)),
alpha=0.0,       #transparency
#linetype=1,      #solid, dashed or other line types
#colour="grey70", #border line color
size=1,          #border line size
show.legend = TRUE
) +
geom_ribbon(aes(ymax=Meta.max,
ymin=with(Quanta, tapply(error, request, quantile, prob=.999))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="red") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.999)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.99))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="orange") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.99)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.9))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="yellow") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.9)),
ymin=Meta.min),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="green") +
geom_point(size=2.5, col="black") +
xlab("Request ms") +
ylab("Error μs") +
ggtitle("Request Fidelity", subtitle = waiver()) +
scale_fill_manual("",values="grey12")
ggplot(Meta, aes(x=Meta.quanta, y=Meta.averages)) +
geom_ribbon(aes(ymin=Meta.min, ymax=with(Quanta, Meta.max)),
alpha=0.0,       #transparency
#linetype=1,      #solid, dashed or other line types
#colour="grey70", #border line color
size=1,          #border line size
show.legend = TRUE
) +
geom_ribbon(aes(ymax=Meta.max,
ymin=with(Quanta, tapply(error, request, quantile, prob=.999))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="red") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.999)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.99))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="orange") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.99)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.9))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="yellow") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.9)),
ymin=Meta.min),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="green") +
geom_point(size=2.5, col="black") +
xlab("Request ms") +
ylab("Error μs") +
ggtitle("Request Fidelity", subtitle = waiver()) +
scale_fill_manual("",values="grey12")
?xlab
?ggtitle
ggplot(Meta, aes(x=Meta.quanta, y=Meta.averages)) +
geom_ribbon(aes(ymin=Meta.min, ymax=with(Quanta, Meta.max)),
alpha=0.0,       #transparency
#linetype=1,      #solid, dashed or other line types
#colour="grey70", #border line color
size=1,          #border line size
show.legend = TRUE
) +
geom_ribbon(aes(ymax=Meta.max,
ymin=with(Quanta, tapply(error, request, quantile, prob=.999))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="red") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.999)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.99))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="orange") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.99)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.9))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="yellow") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.9)),
ymin=Meta.min),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="green") +
geom_point(size=2.5, col="black") +
xlab("Request ms") +
ylab("Error μs") +
ggtitle("Request Fidelity", subtitle = waiver()) +
scale_fill_manual("",values="grey12") +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
ggplot(Meta, aes(x=Meta.quanta, y=Meta.averages)) +
geom_ribbon(aes(ymin=Meta.min, ymax=with(Quanta, Meta.max)),
alpha=0.0,       #transparency
#linetype=1,      #solid, dashed or other line types
#colour="grey70", #border line color
size=1,          #border line size
show.legend = TRUE
) +
geom_ribbon(aes(ymax=Meta.max,
ymin=with(Quanta, tapply(error, request, quantile, prob=.999))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="red") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.999)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.99))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="orange") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.99)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.9))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="yellow") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.9)),
ymin=Meta.min),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="green") +
geom_point(size=2.5, col="black") +
xlab("Request ms") +
ylab("Error μs") +
ggtitle("Request Fidelity", subtitle = waiver()) +
scale_fill_manual("",values="grey12") +
theme(axis.text=element_text(size=12, face="bold"),
axis.title=element_text(size=14,face="bold"))
ggplot(Meta, aes(x=Meta.quanta, y=Meta.averages)) +
geom_ribbon(aes(ymin=Meta.min, ymax=with(Quanta, Meta.max)),
alpha=0.0,       #transparency
#linetype=1,      #solid, dashed or other line types
#colour="grey70", #border line color
size=1,          #border line size
show.legend = TRUE
) +
geom_ribbon(aes(ymax=Meta.max,
ymin=with(Quanta, tapply(error, request, quantile, prob=.999))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="red") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.999)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.99))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="orange") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.99)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.9))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="yellow") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.9)),
ymin=Meta.min),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="green") +
geom_point(size=2.5, col="black") +
xlab("Request ms") +
ylab("Error μs") +
ggtitle("Request Fidelity", subtitle = waiver()) +
scale_fill_manual("",values="grey12") +
theme(axis.text=element_text(size=14, face="bold"),
axis.title=element_text(size=14,face="bold"))
ggplot(Meta, aes(x=Meta.quanta, y=Meta.averages)) +
geom_ribbon(aes(ymin=Meta.min, ymax=with(Quanta, Meta.max)),
alpha=0.0,       #transparency
#linetype=1,      #solid, dashed or other line types
#colour="grey70", #border line color
size=1,          #border line size
show.legend = TRUE
) +
geom_ribbon(aes(ymax=Meta.max,
ymin=with(Quanta, tapply(error, request, quantile, prob=.999))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="red") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.999)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.99))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="orange") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.99)),
ymin=with(Quanta, tapply(error, request, quantile, prob=.9))),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="yellow") +
geom_ribbon(aes(ymax=with(Quanta, tapply(error, request, quantile, prob=.9)),
ymin=Meta.min),
alpha=stroke,       #transparency
linetype=1,      #solid, dashed or other line types
size=1,          #border line size
fill="green") +
geom_point(size=2.5, col="black") +
xlab("Request ms") +
ylab("Error μs") +
ggtitle("Request Fidelity", subtitle = waiver()) +
scale_fill_manual("",values="grey12") +
theme(axis.text=element_text(size=16, face="bold"),
axis.title=element_text(size=16, face="bold"))
