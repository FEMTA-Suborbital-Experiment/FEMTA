association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoother), col=5)
?loess
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
oldfaith.frame(x=Duration, y=Interval))
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
lines(predict(smoother), col=5)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(sort(oldfaith$Duration), sort(oldfaith$Interval),
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[order(oldfaith$Duration)], predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=8, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=9, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=1, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=10, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=12, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
adxl$ID <- seq.int(nrow(adxl))
adxl$time <- adxl$ID / 6000
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=1, cex=.1)
adxl$ID <- seq.int(nrow(adxl))
setwd("~/Documents/FEMTA/ignored/washing-machine")
adxl$ID <- seq.int(nrow(adxl))
adxl <- read.delim("~/Documents/FEMTA/ignored/washing-machine/adxl.txt", stringsAsFactors=FALSE)
View(adxl)
adxl$ID <- seq.int(nrow(adxl))
adxl$time <- adxl$ID / 6000
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=1, cex=.1)
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=2, cex=.1,
main="Washing Machine Test z",
xlab="Time [min]", ylab="Acceleration [g]")
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=3, cex=.1,
main="Washing Machine Test",
xlab="Time [min]", ylab="Z-axis Acceleration [g]")
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=4, cex=.1,
main="Washing Machine Test",
xlab="Time [min]", ylab="Z-axis Acceleration [g]")
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=4, cex=.1,
main="Washing Machine Test (Z axis)",
xlab="Time [min]", ylab="Acceleration [g]")
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spin (Z axis)")
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period (Z axis)")
plot(adxl$time, adxl$xAccel, pch=19, col=2, cex=.1)
points(adxl$xAccel ~ adxl$time)
plot(adxl$time, adxl$yAccel, pch=19, col=3, cex=.1)
points(adxl$xAccel ~ adxl$time, pch=19, col=2, cex=.1)
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1)
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1)
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1,
xlab="Time [min]", ylab="Acceleration [g]",
main="Washing Machine Test (XY axes)")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1)
legend("topright", c("X axis", "Y axis"), col=c(3, 2), lwd=10)
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1,
xlab="Time [min]", ylab="Acceleration [g]",
main="Washing Machine Test (XY axes)")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1)
legend("topleft", c("X axis", "Y axis"), col=c(3, 2), lwd=10)
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period (Z axis)")
legend("topleft", c("Z axis"), col=c(4), lwd=10)
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=4, cex=.1,
main="Washing Machine Test",
xlab="Time [min]", ylab="Acceleration [g]")
legend("topleft", c("Z axis"), col=c(4), lwd=10)
# Both horizontal axes
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1,
xlab="Time [min]", ylab="Acceleration [g]",
main="Washing Machine Test (XY axes)")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1)
legend("topleft", c("X axis", "Y axis"), col=c(3, 2), lwd=10)
# Zoom in on final spin
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
legend("topleft", c("Z axis"), col=c(4), lwd=10)
# Zoom in on final spin XY
plot(adxl$time, adxl$xAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
# Zoom in on final spin XY
plot(adxl$time, adxl$xAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1,
ylim=range(-1.5, -0.5))
# X and Y axes
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1,
xlab="Time [min]", ylab="Acceleration [g]",
main="Washing Machine Test (XY axes)")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1)
legend("topleft", c("X axis", "Y axis"), col=c(3, 2), lwd=10)
# Zoom in on final spin XY
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1,
ylim=range(-1.5, -0.5))
legend("topleft", c("X axis", "Y axis"), col=c(3, 2), lwd=10)
# Zoom in on final Y
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
legend("topleft", c("Y axis"), col=c(4), lwd=10)
# Zoom in on final Y
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
legend("topleft", c("Y axis"), col=c(2), lwd=10)
# Zoom in on final Y
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
# Zoom in on final spin XY
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5))
# Zoom in on final Y
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
# Zoom in on final spin XY
plot(adxl$time, adxl$xAccel, pch=19, col=3, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
points(adxl$yAccel ~ adxl$time, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5))
legend("topleft", c("X axis", "Y axis"), col=c(3, 2), lwd=10)
# Zoom in on final Y
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
legend("topleft", c("Y axis"), col=c(2), lwd=10)
# Zoom in on final Y
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1, -0.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
# Zoom in on final Y
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
# Zoom in on final Y
plot(adxl$time, adxl$xAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
# Zoom in on final Y
plot(adxl$time, adxl$yAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
xlab="Time [min]", ylab="Acceleration [g]",
main="Final Spinning Period")
legend("topleft", c("Y axis"), col=c(2), lwd=10)
i2c$ID <- seq.int(nrow(i2c))
i2c$time <- i2c$ID / 6000
i2c$wait <- as.numeric(i2c$V1) / 1000000.0
plot(i2c$time, i2c$wait, pch=19, col="red", cex=.1)
i2c <- read.table("~/Documents/FEMTA/ignored/washing-machine/i2c.txt", quote="\"", comment.char="", stringsAsFactors=FALSE)
View(i2c)
i2c$ID <- seq.int(nrow(i2c))
i2c$time <- i2c$ID / 6000
i2c$wait <- as.numeric(i2c$V1) / 1000000.0
plot(i2c$time, i2c$wait, pch=19, col="red", cex=.1)
plot(i2c$time, i2c$wait, pch=19, col="purple", cex=.1,
xlab="Time [min]", ylab="I2C Read time [ms]")
plot(i2c$time, i2c$wait, pch=19, col="purple", cex=.1,
xlab="Time [min]", ylab="I2C read time [ms]",
main="I2C communications interval")
plot(i2c$time, i2c$wait, pch=19, col="purple", cex=.1,
xlab="Time [min]", ylab="read time [ms]",
main="I2C communications interval")
setwd("~/Documents/FEMTA/ignored/long-zero")
hourly <- read.csv("~/Documents/FEMTA/ignored/long-zero/hourly.txt", header=FALSE)
View(hourly)
# Z axis
plot(hourly$V1, hourly$V2, pch=19, col=4, cex=.1,
main="Washing Machine Test",
xlab="Time [min]", ylab="Acceleration [g]")
# Z axis
plot(hourly$V1, hourly$V2, pch=19, col=4, cex=.1,
main="Log of minutely max measure delay vs time",
xlab="Time [min]", ylab="Log Minutely Max [log ns]")
# Z axis
plot(hourly$V1, hourly$V2, pch=19, col=4, cex=.1,
main="Log of minutely max measure delay vs time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Z axis
plot(hourly$V1, hourly$V2, pch=19, col=4, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2))
# Delays
plot(hourly$V1, hourly$V2, pch=19, col=5, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col=6, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col=7, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col=*, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col=8, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col=9, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col=4, cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="cyan", cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="orange", cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="darkorange", cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="darkdarkorange", cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="brown", cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=.1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=.2,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=.25,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=.5,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2), col=4)
abline(h=log(10^7 / 2), col=4, lw=4)
abline(h=log(10^7 / 2), col=4, lw=1)
abline(h=log(10^7 / 2), col=4, lw=2)
lebrown", cex=1,
main="Log of Minutely Max Measure Delay
1
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2), col=4, lw=2)
abline(h=log(10^7 / 2), col=2, lw=4)
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2), col=2, lw=8)
legend("topleft", c("Delay", "Acceptability"), col=c("saddlebrown", 2), lwd=10)
legend("topright", c("Delay", "Acceptability"), col=c("saddlebrown", 2), lwd=10)
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2), col=2, lw=8)
legend("topright", c("Delay", "Acceptability"), col=c("saddlebrown", 2), lwd=10)
legend("topright", c("Delay", "Threshold"), col=c("saddlebrown", 2), lwd=10)
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2), col=2, lw=8)
legend("topright", c("Delay", "Threshold"), col=c("saddlebrown", 2), lwd=10)
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=.5,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2), col=2, lw=8)
legend("topright", c("Delay", "Threshold"), col=c("saddlebrown", 2), lwd=10)
# Delays
plot(hourly$V1, hourly$V2, pch=19, col="saddlebrown", cex=1,
main="Log of Minutely Max Measure Delay vs Time",
xlab="Time [min]", ylab="Log minutely max [log ns]")
abline(h=log(10^7 / 2), col=2, lw=8)
legend("topright", c("Delay", "Threshold"), col=c("saddlebrown", 2), lwd=10)
