plot(stddevs, col="red")
plot(stddevs, col="red", lw=4)
plot(stddevs, col="red",)
plot(stddevs, xlab="age", ylab="standard deviation" col="red")
plot(stddevs, xlab="age", ylab="standard deviation", col="red")
# create the relevent plots for the data above
plot(means,   xlab="age", ylab="length mean",                   col="red")
plot(stddevs, xlab="age", ylab="standard deviation of lengths", col="red")
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
abline(lm(stddevs ~ seq(8)), col=4, lw=4)
# create the relevent plots for the data above
plot(means,   xlab="age", ylab="length mean",                   col="red", main="Average Length across Ages")
plot(stddevs, xlab="age", ylab="standard deviation of lengths", col="red", main="Standard Deviation of Lengths across Ages")
plot(oldfaith$Duration, oldfaith$Interval)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval")
# create the relevent plots for the data above
plot(means,   xlab="age", ylab="length mean",
col="red", main="Average Length across Ages")
plot(stddevs, xlab="age", ylab="standard deviation of lengths",
col="red", main="Standard Deviation of Lengths across Ages")
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
abline(lm(stddevs ~ seq(8)), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
main="Interval to next eruption as a function of eruption duration")
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
main="Interval to Next Eruption as a Function of Duration")
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval))
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval))
abline(lm(oldfaith$Duration ~ oldfaith$Interval), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval), col=4, lw=4)
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration [s]", ylab="interval [m]",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
# treating age as a categorial variable, apply the mean and
# standard deviation functions to get sub-group characteristics
means   <- tapply(wblake$Length, wblake$Age, mean)
stddevs <- tapply(wblake$Length, wblake$Age,   sd)
# create the relevent plots for the data above
plot(means,   xlab="age [yr]", ylab="length mean [mm]",
col="red", main="Average Length across Ages")
plot(stddevs, xlab="age [yr]", ylab="standard deviation of lengths [mm]",
col="red", main="Standard Deviation of Lengths across Ages")
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
abline(lm(stddevs ~ seq(8)), col=4, lw=4)
means
# treating age as a categorial variable, apply the mean and
# variance functions to get sub-group characteristics
means     <- tapply(wblake$Length, wblake$Age, mean)
variences <- tapply(wblake$Length, wblake$Age,  var)
# print info to the console
means
variences
association <- lm(means ~ seq(8))
summary(association)
abline(association)
association <- lm(means ~ seq(8), col=4, lw=4)
# treating age as a categorial variable, apply the mean and
# variance functions to get sub-group characteristics
means     <- tapply(wblake$Length, wblake$Age, mean)
variences <- tapply(wblake$Length, wblake$Age,  var)
stddevs   <- tapply(wblake$Length, wblake$Age,   sd)
# print info to the console
means
variences
# create the plot for the means data, including a regression line
plot(means,   xlab="age [yr]", ylab="length mean [mm]",
col="red", main="Average Length across Ages")
association <- lm(means ~ seq(8), col=4, lw=4)
summary(association)
abline(association)
abline(association, col=4, lw=4)
# treating age as a categorial variable, apply the mean and
# variance functions to get sub-group characteristics
means     <- tapply(wblake$Length, wblake$Age, mean)
variences <- tapply(wblake$Length, wblake$Age,  var)
stddevs   <- tapply(wblake$Length, wblake$Age,   sd)
# print info to the console
means
variences
# create the plot for the means data, including a regression line
plot(means,   xlab="age [yr]", ylab="length mean [mm]",
col="red", main="Average Length across Ages")
association <- lm(means ~ seq(8))
summary(association)
abline(association, col=4, lw=4)
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
association <- lm(stddevs ~ seq(8))
summary(association)
# create the plot for the standard deviations, including the regression
plot(stddevs, xlab="age [yr]", ylab="standard deviation of lengths [mm]",
col="red", main="Standard Deviation of Lengths across Ages")
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
association <- lm(stddevs ~ seq(8))
summary(association)
abline(association, col=4, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
# create a linear model where duration predicts interval
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
summary(association)
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(smoothed)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(smoothed)
abline(association, col=4, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5)
lines(smoothed, oldfaith$Duration, col=5)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration), data=oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
lines(smoothed, oldfaith$Duration, col=3, lw=4)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
lines(smoothed, oldfaith$Duration, col=5, lw=4)
lines(smoothed, x=oldfaith$Duration, col=5, lw=4)
lines(smoothed, x=oldfaith$Duration, col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, x=oldfaith$Duration, col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, col=5)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoother), col=5)
?loess
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
oldfaith.frame(x=Duration, y=Interval))
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
lines(predict(smoother), col=5)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(sort(oldfaith$Duration), sort(oldfaith$Interval),
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[order(oldfaith$Duration)], predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=8, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=9, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=1, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=10, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=12, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
setwd("~/Documents/FEMTA/ignored/calibration")
library(readr)
GND <- read_csv("pro-GND.txt")
VDD <- read_csv("pro-VDD.txt")
SDA <- read_csv("pro-SDA.txt")
SCL <- read_csv("pro-SCL.txt")
#GND_model <- lm(Volts ~ poly(Measure, 3, raw=TRUE), data=GND)
GND_model <- lm(Volts ~ Measure, data=GND)
plot(GND$Measure ~ GND$Volts, col=3)
summary(GND_model)
head(GND)
GND_model
GND_model$coefficients
GND$Fit   <- -0.0009114640 + 0.0001874118 * GND$Measure
GND$Error <- GND$Volts - GND$Fit
plot(GND$Time, GND$Error, cex=.1, col=2)
abline(a=0, b=0, lw=4, col=1)
mean(GND$Error)
sd(GND$Error)
quantile(GND$Error, .025)
quantile(GND$Error, .975)
quantile(GND$Error, .1)
quantile(GND$Error, .9)
quantile(GND$Error, .99)
#GND_model <- lm(Volts ~ poly(Measure, 3, raw=TRUE), data=GND)
GND_model <- lm(Volts ~ Measure, data=GND)
VDD_model <- lm(Volts ~ Measure, data=VDD)
SDA_model <- lm(Volts ~ Measure, data=SDA)
SCL_model <- lm(Volts ~ Measure, data=SCL)
VDD_model$coefficients
VDD$Fit   <- -0.0009012627 + 0.0001874287 * VDD$Measure
SDA_model$coefficients
SCL_model$coefficients
GND$Error <- GND$Volts - GND$Fit
VDD$Error <- VDD$Volts - GND$Volts
SDA$Error <- SDA$Volts - SDA$Fit
SCL$Error <- SCL$Volts - SCL$Volts
GND$Fit   <- -0.0009114640 + 0.0001874118 * GND$Measure
VDD$Fit   <- -0.0009012627 + 0.0001874287 * VDD$Measure
SDA$Fit   <- -0.0005211696 + 0.0001873591 * SDA$Measure
SCL$Fit   <- -0.0009628627 + 0.0001873755 * SCL$Measure
GND$Error <- GND$Volts - GND$Fit
VDD$Error <- VDD$Volts - GND$Fit
SDA$Error <- SDA$Volts - SDA$Fit
SCL$Error <- SCL$Volts - SCL$Fit
GND$Fit   <- -0.0009114640 + 0.0001874118 * GND$Measure
VDD$Fit   <- -0.0009012627 + 0.0001874287 * VDD$Measure
SDA$Fit   <- -0.0005211696 + 0.0001873591 * SDA$Measure
SCL$Fit   <- -0.0009628627 + 0.0001873755 * SCL$Measure
GND$Error <- GND$Volts - GND$Fit
VDD$Error <- VDD$Volts - VDD$Fit
SDA$Error <- SDA$Volts - SDA$Fit
SCL$Error <- SCL$Volts - SCL$Fit
plot(GND$Measure ~ GND$Volts, col=3)
mean(GND$Error)
sd(GND$Error)
quantile(GND$Error, .025)
quantile(GND$Error, .975)
mean(GND$Error)
mean(VDD$Error)
mean(SDA$Error)
mean(SCL$Error)
quantile(GND$Error, .025)
quantile(VDD$Error, .025)
quantile(SDA$Error, .025)
quantile(SCL$Error, .025)
quantile(GND$Error, .975)
quantile(VDD$Error, .975)
quantile(SDA$Error, .975)
quantile(SCL$Error, .975)
