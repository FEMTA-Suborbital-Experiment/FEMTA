# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
abline(lm(stddevs ~ seq(8)), col=4, lw=4)
# create the relevent plots for the data above
plot(means,   xlab="age", ylab="length mean",                   col="red", main="Average Length across Ages")
plot(stddevs, xlab="age", ylab="standard deviation of lengths", col="red", main="Standard Deviation of Lengths across Ages")
plot(oldfaith$Duration, oldfaith$Interval)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval")
# create the relevent plots for the data above
plot(means,   xlab="age", ylab="length mean",
col="red", main="Average Length across Ages")
plot(stddevs, xlab="age", ylab="standard deviation of lengths",
col="red", main="Standard Deviation of Lengths across Ages")
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
abline(lm(stddevs ~ seq(8)), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
main="Interval to next eruption as a function of eruption duration")
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
main="Interval to Next Eruption as a Function of Duration")
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval))
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval))
abline(lm(oldfaith$Duration ~ oldfaith$Interval), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Duration ~ oldfaith$Interval), col=4, lw=4)
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration", ylab="interval",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
plot(oldfaith$Duration, oldfaith$Interval, xlab="duration [s]", ylab="interval [m]",
col="red", main="Interval to Next Eruption as a Function of Duration")
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
# treating age as a categorial variable, apply the mean and
# standard deviation functions to get sub-group characteristics
means   <- tapply(wblake$Length, wblake$Age, mean)
stddevs <- tapply(wblake$Length, wblake$Age,   sd)
# create the relevent plots for the data above
plot(means,   xlab="age [yr]", ylab="length mean [mm]",
col="red", main="Average Length across Ages")
plot(stddevs, xlab="age [yr]", ylab="standard deviation of lengths [mm]",
col="red", main="Standard Deviation of Lengths across Ages")
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
abline(lm(stddevs ~ seq(8)), col=4, lw=4)
means
# treating age as a categorial variable, apply the mean and
# variance functions to get sub-group characteristics
means     <- tapply(wblake$Length, wblake$Age, mean)
variences <- tapply(wblake$Length, wblake$Age,  var)
# print info to the console
means
variences
association <- lm(means ~ seq(8))
summary(association)
abline(association)
association <- lm(means ~ seq(8), col=4, lw=4)
# treating age as a categorial variable, apply the mean and
# variance functions to get sub-group characteristics
means     <- tapply(wblake$Length, wblake$Age, mean)
variences <- tapply(wblake$Length, wblake$Age,  var)
stddevs   <- tapply(wblake$Length, wblake$Age,   sd)
# print info to the console
means
variences
# create the plot for the means data, including a regression line
plot(means,   xlab="age [yr]", ylab="length mean [mm]",
col="red", main="Average Length across Ages")
association <- lm(means ~ seq(8), col=4, lw=4)
summary(association)
abline(association)
abline(association, col=4, lw=4)
# treating age as a categorial variable, apply the mean and
# variance functions to get sub-group characteristics
means     <- tapply(wblake$Length, wblake$Age, mean)
variences <- tapply(wblake$Length, wblake$Age,  var)
stddevs   <- tapply(wblake$Length, wblake$Age,   sd)
# print info to the console
means
variences
# create the plot for the means data, including a regression line
plot(means,   xlab="age [yr]", ylab="length mean [mm]",
col="red", main="Average Length across Ages")
association <- lm(means ~ seq(8))
summary(association)
abline(association, col=4, lw=4)
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
association <- lm(stddevs ~ seq(8))
summary(association)
# create the plot for the standard deviations, including the regression
plot(stddevs, xlab="age [yr]", ylab="standard deviation of lengths [mm]",
col="red", main="Standard Deviation of Lengths across Ages")
# add straight-line mean function to plot to help see if these
# data indeed indicate a null plot when looking at standard devs
association <- lm(stddevs ~ seq(8))
summary(association)
abline(association, col=4, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
# create a linear model where duration predicts interval
abline(lm(oldfaith$Interval ~ oldfaith$Duration), col=4, lw=4)
summary(association)
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(smoothed)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(smoothed)
abline(association, col=4, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5)
lines(smoothed, oldfaith$Duration, col=5)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration), data=oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
lines(smoothed, oldfaith$Duration, col=3, lw=4)
smoothed <- predict(loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, oldfaith$Duration, col=5, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
lines(smoothed, oldfaith$Duration, col=5, lw=4)
lines(smoothed, x=oldfaith$Duration, col=5, lw=4)
lines(smoothed, x=oldfaith$Duration, col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, x=oldfaith$Duration, col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- predict(
loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(smoothed, col=5)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration, data=oldfaith, span=.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoothed <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoothed), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration)
lines(predict(smoother), col=5)
?loess
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, oldfaith)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
oldfaith.frame(x=Duration, y=Interval))
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(predict(smoother), col=5)
smoother <- loess(oldfaith$Duration ~ oldfaith$Interval, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
lines(predict(smoother), col=5)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8,
data.frame(x=oldfaith$Duration, y=oldfaith$Interval))
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
plot(sort(oldfaith$Duration), sort(oldfaith$Interval),
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(sort(oldfaith$Interval) ~ sort(oldfaith$Duration), span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration, predict(smoother), col=5)
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
x <- sort(oldfaith$Duration.Length)
y <- oldfaith$Interval.Width[order(oldfaith$Duration.Length)]
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[order(oldfaith$Duration)], predict(smoother), col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.8)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.4)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=8, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=9, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=2, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=1, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=5, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=6, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=10, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=12, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
# plot the interval against the duration
plot(oldfaith$Duration, oldfaith$Interval,
xlab="duration [s]", ylab="interval [min]", col="red",
main="Interval to Next Eruption as a Function of Duration")
association <- lm(oldfaith$Interval ~ oldfaith$Duration)
summary(association)
xOrdered <- order(oldfaith$Duration)
smoother <- loess(oldfaith$Interval ~ oldfaith$Duration, span=0.5)
# create a linear model where duration predicts interval
abline(association, col=4, lw=4)
lines(oldfaith$Duration[xOrdered], predict(smoother)[xOrdered], col=7, lw=4)
setwd("~/Documents/FEMTA/ignored/washing-machine")
adxl <- read.delim("~/Documents/FEMTA/ignored/washing-machine/adxl.txt")
View(adxl)
adxl$ID <- seq.int(nrow(data))
adxl$ID <- seq.int(nrow(adxl))
adxl$time <- adxl$ID / 60000
plot(adxl$time, adxl$zAccel)
adxl$time <- adxl$ID / 6000
plot(adxl$time, adxl$zAccel)
View(adxl)
?plot
adxl <- read.delim("~/Documents/FEMTA/ignored/washing-machine/adxl.txt", stringsAsFactors=FALSE)
View(adxl)
adxl$ID <- seq.int(nrow(adxl))
adxl$time <- adxl$ID / 6000
plot(adxl$time, adxl$zAccel)
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=4)
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=3, cex=1)
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=3, cex=.1)
plot(adxl$time, adxl$zAccel, ylim=range(-1.5, -0.5), pch=19, col=1, cex=.1)
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(40, 51),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(44, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47.25, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=5, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=6, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=1, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=2, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=3, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$zAccel, pch=19, col=4, cex=.1,
xlim=range(47.0, 50.5),
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$xAccel, pch=19, col=4, cex=.1,
ylim=range(-1.5, -0.5))
plot(adxl$time, adxl$xAccel, pch=19, col=4, cex=.1)
plot(adxl$time, adxl$xAccel, pch=19, col=4, cex=.1)
plot(adxl$time, adxl$yAccel, pch=19, col=3, cex=.1)
i2c <- read.table("~/Documents/FEMTA/ignored/washing-machine/i2c.txt", quote="\"", comment.char="", stringsAsFactors=FALSE)
View(i2c)
i2c$time < adxl$time
i2c$time <- adxl$time
i2c$ID <- seq.int(nrow(adxl))
i2c$time <- i2c$ID / 6000
plot(i2c$time, i2c$V1, pch=19, col=8, cex=1)
i2c$ID <- seq.int(nrow(i2c))
i2c$time <- i2c$ID / 6000
plot(i2c$time, i2c$V1, pch=19, col=8, cex=1)
plot(i2c$time, i2c$V1, pch=19, col=9, cex=.1)
i2c$wait <- i2c$V1 / 1E6
i2c$wait <- i2c$V1 / 1000000
i2c$time <- i2c$ID / 6000
i2c$wait <- i2c$V1 / 1000000
i2c$wait <- i2c$V1 / 1000000.0
i2c$wait <- as.numeric(i2c$V1) / 1000000.0
plot(i2c$time, i2c$wait, pch=19, col=9, cex=.1)
plot(i2c$time, i2c$wait, pch=19, col="red", cex=.1)
